class Main {
  public static void main(String[] args) {
    int[] input={3,225,1,225,6,6,1100,1,238,225,104,0,1101,65,39,225,2,14,169,224,101,-2340,224,224,4,224,1002,223,8,223,101,7,224,224,1,224,223,223,1001,144,70,224,101,-96,224,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,1101,92,65,225,1102,42,8,225,1002,61,84,224,101,-7728,224,224,4,224,102,8,223,223,1001,224,5,224,1,223,224,223,1102,67,73,224,1001,224,-4891,224,4,224,102,8,223,223,101,4,224,224,1,224,223,223,1102,54,12,225,102,67,114,224,101,-804,224,224,4,224,102,8,223,223,1001,224,3,224,1,224,223,223,1101,19,79,225,1101,62,26,225,101,57,139,224,1001,224,-76,224,4,224,1002,223,8,223,1001,224,2,224,1,224,223,223,1102,60,47,225,1101,20,62,225,1101,47,44,224,1001,224,-91,224,4,224,1002,223,8,223,101,2,224,224,1,224,223,223,1,66,174,224,101,-70,224,224,4,224,102,8,223,223,1001,224,6,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,108,226,226,224,102,2,223,223,1005,224,329,101,1,223,223,1107,226,677,224,1002,223,2,223,1005,224,344,101,1,223,223,8,226,677,224,102,2,223,223,1006,224,359,101,1,223,223,108,677,677,224,1002,223,2,223,1005,224,374,1001,223,1,223,1108,226,677,224,1002,223,2,223,1005,224,389,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,404,1001,223,1,223,1108,677,677,224,102,2,223,223,1006,224,419,1001,223,1,223,1008,226,677,224,102,2,223,223,1005,224,434,101,1,223,223,107,677,677,224,102,2,223,223,1006,224,449,1001,223,1,223,1007,226,677,224,102,2,223,223,1005,224,464,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,479,101,1,223,223,1007,226,226,224,102,2,223,223,1005,224,494,101,1,223,223,7,677,677,224,102,2,223,223,1006,224,509,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,524,1001,223,1,223,108,226,677,224,1002,223,2,223,1006,224,539,101,1,223,223,8,226,226,224,102,2,223,223,1006,224,554,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,569,1001,223,1,223,1108,677,226,224,1002,223,2,223,1006,224,584,101,1,223,223,1107,677,226,224,1002,223,2,223,1005,224,599,101,1,223,223,107,226,226,224,102,2,223,223,1006,224,614,1001,223,1,223,7,226,677,224,102,2,223,223,1005,224,629,1001,223,1,223,107,677,226,224,1002,223,2,223,1005,224,644,1001,223,1,223,1107,677,677,224,102,2,223,223,1006,224,659,101,1,223,223,1008,226,226,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226};
    int diagnostic = Integer.MAX_VALUE;
    int ID=1;
    int m=0;
    int n=0;
    int p=0;
    int relativebase=0;
    for(int i=0;i<input.length;){
      if(input[i]==99){
        break;
      }
      int[] digits=getdigits(input[i]);
      switch(digits[0]){
        case 1:
        m= getparam(1,i,input,digit,relativebase);
        n= getparam(2,i,input,digit,relativebase);
        p= digit[i+3]==0?input[i+3]:input[i+3]+relativebase;
        input[p]=m+n;
        i+=4;
        break;
        case 2:
        m= getparam(1,i,input,digit,relativebase);
        n= getparam(2,i,input,digit,relativebase);
        p= digit[i+3]==0?input[i+3]:input[i+3]+relativebase;
        input[p]=m*n;
        i+=4;
        break;
        case 3:
        m= ID;
        p= digit[i+3]==0?input[i+3]:input[i+3]+relativebase;
        input[p]=m;
        i+=2;
        break;
        case 4:
        m= getparam(1,i,input,digit,relativebase);
        diagnostic=m;
        i+=2;
        break;
        case 5:
        m= getparam(1,i,input,digit,relativebase);
        n= getparam(2,i,input,digit,relativebase);
        if(m!=0){  
          i+=n;       
        }
        else{i+=3;}
        break;
        case 6:
        m= getparam(1,i,input,digit,relativebase);
        n= getparam(2,i,input,digit,relativebase);
        if(m==0){  
          i+=n;       
        }
        else{i+=3;}
        break;
        case 7:
        m= getparam(1,i,input,digit,relativebase);
        n= getparam(2,i,input,digit,relativebase);
        p= digit[i+3]==0?input[i+3]:input[i+3]+relativebase;
        input[p]=m<n?1:0;
        i+=4;
        break;
        case 8:
        m= getparam(1,i,input,digit,relativebase);
        n= getparam(2,i,input,digit,relativebase);
        p= digit[i+3]==0?input[i+3]:input[i+3]+relativebase;
        input[p]=m==n?1:0;
        i+=4;
        break;
        case 9:
        m= getparam(1,i,input,digit,relativebase);
        relativebase+=m;
        break;
      }
    }
    System.out.println(diagnostic);
  }
  private int getparam(int i,int index,int[] input,int[] digit, int relativebase){
    switch (digit[i]){
      case 0:
      return input[input[i+index]];
      case 1:
      return input[i+index];
      case 2:
      return input[input[i+index]+relativebase];

    }
    return -1;
  }
  private static int[] getdigits(int input){
    int instruction = input<100?input:input%100;
    int[] res=new int[4];
    res[0]=instruction;
    input=input/100;
    int index=1;
    while(input>0){
      res[index++]=input<10?input:input%10;
      input/=10;
    }
    return res;
  }
}
